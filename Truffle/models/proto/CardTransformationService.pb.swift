// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CardTransformationService.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GetCardTransformationDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var platform: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetCardTransformationDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var augmentedTransformations: [AugmentedTransformation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct AugmentedTransformation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transformationID: Int32 {
    get {return _storage._transformationID}
    set {_uniqueStorage()._transformationID = newValue}
  }

  var augmentedImages: [AugmentedImage] {
    get {return _storage._augmentedImages}
    set {_uniqueStorage()._augmentedImages = newValue}
  }

  var augmentedVideo: AugmentedVideo {
    get {return _storage._augmentedVideo ?? AugmentedVideo()}
    set {_uniqueStorage()._augmentedVideo = newValue}
  }
  /// Returns true if `augmentedVideo` has been explicitly set.
  var hasAugmentedVideo: Bool {return _storage._augmentedVideo != nil}
  /// Clears the value of `augmentedVideo`. Subsequent reads from it will return its default value.
  mutating func clearAugmentedVideo() {_uniqueStorage()._augmentedVideo = nil}

  var attachmentView: AttachmentView {
    get {return _storage._attachmentView ?? AttachmentView()}
    set {_uniqueStorage()._attachmentView = newValue}
  }
  /// Returns true if `attachmentView` has been explicitly set.
  var hasAttachmentView: Bool {return _storage._attachmentView != nil}
  /// Clears the value of `attachmentView`. Subsequent reads from it will return its default value.
  mutating func clearAttachmentView() {_uniqueStorage()._attachmentView = nil}

  var animationEffect: AnimationEffect {
    get {return _storage._animationEffect ?? AnimationEffect()}
    set {_uniqueStorage()._animationEffect = newValue}
  }
  /// Returns true if `animationEffect` has been explicitly set.
  var hasAnimationEffect: Bool {return _storage._animationEffect != nil}
  /// Clears the value of `animationEffect`. Subsequent reads from it will return its default value.
  mutating func clearAnimationEffect() {_uniqueStorage()._animationEffect = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct AttachmentView {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var linkButtons: [LinkButton] = []

  var attachmentUiViewSize: Size {
    get {return _attachmentUiViewSize ?? Size()}
    set {_attachmentUiViewSize = newValue}
  }
  /// Returns true if `attachmentUiViewSize` has been explicitly set.
  var hasAttachmentUiViewSize: Bool {return self._attachmentUiViewSize != nil}
  /// Clears the value of `attachmentUiViewSize`. Subsequent reads from it will return its default value.
  mutating func clearAttachmentUiViewSize() {self._attachmentUiViewSize = nil}

  var attachmentWidthScaleToImageWidth: Float = 0

  var minScale: Float = 0

  var maxScale: Float = 0

  var position: Position {
    get {return _position ?? Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _attachmentUiViewSize: Size? = nil
  fileprivate var _position: Position? = nil
}

struct AnimationEffect {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lottieURL: String = String()

  var effectViewSize: Size {
    get {return _effectViewSize ?? Size()}
    set {_effectViewSize = newValue}
  }
  /// Returns true if `effectViewSize` has been explicitly set.
  var hasEffectViewSize: Bool {return self._effectViewSize != nil}
  /// Clears the value of `effectViewSize`. Subsequent reads from it will return its default value.
  mutating func clearEffectViewSize() {self._effectViewSize = nil}

  var minScale: Float = 0

  var maxScale: Float = 0

  var position: Position {
    get {return _position ?? Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _effectViewSize: Size? = nil
  fileprivate var _position: Position? = nil
}

struct LinkButton {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var linkButtonID: Int32 = 0

  var imageURL: String = String()

  var text: String = String()

  var colorCode: String = String()

  var webURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct AugmentedImage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imageID: Int32 = 0

  var imageURL: String = String()

  var imageName: String = String()

  var physicalImageSize: Size {
    get {return _physicalImageSize ?? Size()}
    set {_physicalImageSize = newValue}
  }
  /// Returns true if `physicalImageSize` has been explicitly set.
  var hasPhysicalImageSize: Bool {return self._physicalImageSize != nil}
  /// Clears the value of `physicalImageSize`. Subsequent reads from it will return its default value.
  mutating func clearPhysicalImageSize() {self._physicalImageSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _physicalImageSize: Size? = nil
}

struct AugmentedVideo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var videoURL: String = String()

  var videoDimensionWidthPx: Int32 = 0

  var videoDimensionHeightPx: Int32 = 0

  var videoWidthScaleToImageWidth: Float = 0

  var position: Position {
    get {return _position ?? Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: Position? = nil
}

struct Size {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var width: Float = 0

  var height: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Position {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var xScaleToImageWidth: Float = 0

  var y: Float = 0

  var zScaleToImageHeight: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension GetCardTransformationDataRequest: @unchecked Sendable {}
extension GetCardTransformationDataResponse: @unchecked Sendable {}
extension AugmentedTransformation: @unchecked Sendable {}
extension AttachmentView: @unchecked Sendable {}
extension AnimationEffect: @unchecked Sendable {}
extension LinkButton: @unchecked Sendable {}
extension AugmentedImage: @unchecked Sendable {}
extension AugmentedVideo: @unchecked Sendable {}
extension Size: @unchecked Sendable {}
extension Position: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GetCardTransformationDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetCardTransformationDataRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platform"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetCardTransformationDataRequest, rhs: GetCardTransformationDataRequest) -> Bool {
    if lhs.platform != rhs.platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCardTransformationDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetCardTransformationDataResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "augmented_transformations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.augmentedTransformations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.augmentedTransformations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.augmentedTransformations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetCardTransformationDataResponse, rhs: GetCardTransformationDataResponse) -> Bool {
    if lhs.augmentedTransformations != rhs.augmentedTransformations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AugmentedTransformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AugmentedTransformation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transformation_id"),
    2: .standard(proto: "augmented_images"),
    3: .standard(proto: "augmented_video"),
    4: .standard(proto: "attachment_view"),
    5: .standard(proto: "animation_effect"),
  ]

  fileprivate class _StorageClass {
    var _transformationID: Int32 = 0
    var _augmentedImages: [AugmentedImage] = []
    var _augmentedVideo: AugmentedVideo? = nil
    var _attachmentView: AttachmentView? = nil
    var _animationEffect: AnimationEffect? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transformationID = source._transformationID
      _augmentedImages = source._augmentedImages
      _augmentedVideo = source._augmentedVideo
      _attachmentView = source._attachmentView
      _animationEffect = source._animationEffect
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._transformationID) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._augmentedImages) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._augmentedVideo) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._attachmentView) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._animationEffect) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._transformationID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._transformationID, fieldNumber: 1)
      }
      if !_storage._augmentedImages.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._augmentedImages, fieldNumber: 2)
      }
      try { if let v = _storage._augmentedVideo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._attachmentView {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._animationEffect {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AugmentedTransformation, rhs: AugmentedTransformation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transformationID != rhs_storage._transformationID {return false}
        if _storage._augmentedImages != rhs_storage._augmentedImages {return false}
        if _storage._augmentedVideo != rhs_storage._augmentedVideo {return false}
        if _storage._attachmentView != rhs_storage._attachmentView {return false}
        if _storage._animationEffect != rhs_storage._animationEffect {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AttachmentView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AttachmentView"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "link_buttons"),
    2: .standard(proto: "attachment_ui_view_size"),
    3: .standard(proto: "attachment_width_scale_to_image_width"),
    4: .standard(proto: "min_scale"),
    5: .standard(proto: "max_scale"),
    6: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.linkButtons) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._attachmentUiViewSize) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.attachmentWidthScaleToImageWidth) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.minScale) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.maxScale) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.linkButtons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.linkButtons, fieldNumber: 1)
    }
    try { if let v = self._attachmentUiViewSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.attachmentWidthScaleToImageWidth != 0 {
      try visitor.visitSingularFloatField(value: self.attachmentWidthScaleToImageWidth, fieldNumber: 3)
    }
    if self.minScale != 0 {
      try visitor.visitSingularFloatField(value: self.minScale, fieldNumber: 4)
    }
    if self.maxScale != 0 {
      try visitor.visitSingularFloatField(value: self.maxScale, fieldNumber: 5)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AttachmentView, rhs: AttachmentView) -> Bool {
    if lhs.linkButtons != rhs.linkButtons {return false}
    if lhs._attachmentUiViewSize != rhs._attachmentUiViewSize {return false}
    if lhs.attachmentWidthScaleToImageWidth != rhs.attachmentWidthScaleToImageWidth {return false}
    if lhs.minScale != rhs.minScale {return false}
    if lhs.maxScale != rhs.maxScale {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AnimationEffect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AnimationEffect"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lottie_url"),
    2: .standard(proto: "effect_view_size"),
    3: .standard(proto: "min_scale"),
    4: .standard(proto: "max_scale"),
    5: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.lottieURL) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._effectViewSize) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.minScale) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.maxScale) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.lottieURL.isEmpty {
      try visitor.visitSingularStringField(value: self.lottieURL, fieldNumber: 1)
    }
    try { if let v = self._effectViewSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.minScale != 0 {
      try visitor.visitSingularFloatField(value: self.minScale, fieldNumber: 3)
    }
    if self.maxScale != 0 {
      try visitor.visitSingularFloatField(value: self.maxScale, fieldNumber: 4)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AnimationEffect, rhs: AnimationEffect) -> Bool {
    if lhs.lottieURL != rhs.lottieURL {return false}
    if lhs._effectViewSize != rhs._effectViewSize {return false}
    if lhs.minScale != rhs.minScale {return false}
    if lhs.maxScale != rhs.maxScale {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LinkButton: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LinkButton"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "link_button_id"),
    2: .standard(proto: "image_url"),
    3: .same(proto: "text"),
    4: .standard(proto: "color_code"),
    5: .standard(proto: "web_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.linkButtonID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.colorCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.webURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.linkButtonID != 0 {
      try visitor.visitSingularInt32Field(value: self.linkButtonID, fieldNumber: 1)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 2)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    if !self.colorCode.isEmpty {
      try visitor.visitSingularStringField(value: self.colorCode, fieldNumber: 4)
    }
    if !self.webURL.isEmpty {
      try visitor.visitSingularStringField(value: self.webURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LinkButton, rhs: LinkButton) -> Bool {
    if lhs.linkButtonID != rhs.linkButtonID {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.text != rhs.text {return false}
    if lhs.colorCode != rhs.colorCode {return false}
    if lhs.webURL != rhs.webURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AugmentedImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AugmentedImage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_id"),
    2: .standard(proto: "image_url"),
    3: .standard(proto: "image_name"),
    4: .standard(proto: "physical_image_size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.imageID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageName) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._physicalImageSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.imageID != 0 {
      try visitor.visitSingularInt32Field(value: self.imageID, fieldNumber: 1)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 2)
    }
    if !self.imageName.isEmpty {
      try visitor.visitSingularStringField(value: self.imageName, fieldNumber: 3)
    }
    try { if let v = self._physicalImageSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AugmentedImage, rhs: AugmentedImage) -> Bool {
    if lhs.imageID != rhs.imageID {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.imageName != rhs.imageName {return false}
    if lhs._physicalImageSize != rhs._physicalImageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AugmentedVideo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AugmentedVideo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "video_url"),
    2: .standard(proto: "video_dimension_width_px"),
    3: .standard(proto: "video_dimension_height_px"),
    4: .standard(proto: "video_width_scale_to_image_width"),
    5: .same(proto: "position"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.videoURL) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.videoDimensionWidthPx) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.videoDimensionHeightPx) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.videoWidthScaleToImageWidth) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.videoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.videoURL, fieldNumber: 1)
    }
    if self.videoDimensionWidthPx != 0 {
      try visitor.visitSingularInt32Field(value: self.videoDimensionWidthPx, fieldNumber: 2)
    }
    if self.videoDimensionHeightPx != 0 {
      try visitor.visitSingularInt32Field(value: self.videoDimensionHeightPx, fieldNumber: 3)
    }
    if self.videoWidthScaleToImageWidth != 0 {
      try visitor.visitSingularFloatField(value: self.videoWidthScaleToImageWidth, fieldNumber: 4)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AugmentedVideo, rhs: AugmentedVideo) -> Bool {
    if lhs.videoURL != rhs.videoURL {return false}
    if lhs.videoDimensionWidthPx != rhs.videoDimensionWidthPx {return false}
    if lhs.videoDimensionHeightPx != rhs.videoDimensionHeightPx {return false}
    if lhs.videoWidthScaleToImageWidth != rhs.videoWidthScaleToImageWidth {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Size"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.width) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularFloatField(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularFloatField(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Size, rhs: Size) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Position"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "xScaleToImageWidth"),
    2: .same(proto: "y"),
    3: .same(proto: "zScaleToImageHeight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.xScaleToImageWidth) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.y) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.zScaleToImageHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.xScaleToImageWidth != 0 {
      try visitor.visitSingularFloatField(value: self.xScaleToImageWidth, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.zScaleToImageHeight != 0 {
      try visitor.visitSingularFloatField(value: self.zScaleToImageHeight, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Position, rhs: Position) -> Bool {
    if lhs.xScaleToImageWidth != rhs.xScaleToImageWidth {return false}
    if lhs.y != rhs.y {return false}
    if lhs.zScaleToImageHeight != rhs.zScaleToImageHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
